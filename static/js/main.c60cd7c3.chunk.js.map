{"version":3,"sources":["useWindowDimensions.js","App.js","serviceWorker.js","index.js","selfie.jpg"],"names":["getWindowDimensions","_window","window","width","innerWidth","height","innerHeight","App","_useWindowDimensions","_useState","useState","_useState2","Object","slicedToArray","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","console","log","w","h","react_default","a","createElement","lib_default","src","selfie","Map","crs","L","CRS","Simple","boundsOptions","bounds","maxBounds","maxBoundsViscosity","style","concat","ImageOverlay","url","props","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kPAEA,SAASA,IAAsB,IAAAC,EACsBC,OACnD,MAAO,CACLC,MAH2BF,EACrBG,WAGNC,OAJ2BJ,EACFK,wECsCdC,MAjCf,WAAe,IAAAC,EDEA,WAA+B,IAAAC,EACIC,mBAASV,KADbW,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrCK,EADqCH,EAAA,GACnBI,EADmBJ,EAAA,GAY5C,OATAK,oBAAU,WACR,SAASC,IACPF,EAAoBf,KAItB,OADAE,OAAOgB,iBAAiB,SAAUD,GAC3B,kBAAMf,OAAOiB,oBAAoB,SAAUF,KACjD,IAEIH,ECZmBM,GAAlBf,EAFKG,EAELH,OAAQF,EAFHK,EAEGL,MAFHM,EAGeC,oBAAS,GAHxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAAE,EAAA,GAAAA,EAAA,GAIbU,QAAQC,IAAIjB,EAAOF,GACnB,IAAIoB,EAAIpB,EACLA,EAAQ,MACToB,EAAI,KAEN,IAAIC,EAAID,EAKR,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,IAAKC,KAELL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,IAAKC,IAAEC,IAAIC,OAAQC,cAAe,CAAC,CAAC,EAAE,GAAI,CAACb,EAAEC,IAAKa,OAAQ,CAAC,CAAC,EAAE,GAAI,CAACd,EAAEC,IAAKc,UAAW,CAAC,CAAC,EAAE,GAAI,CAACf,EAAEC,IAAKe,mBAAoB,EAAKC,MAAO,CAACrC,MAAK,GAAAsC,OAAKlB,EAAL,MAAYlB,OAAM,GAAAoC,OAAIlB,EAAJ,QAClKE,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,IAAKb,IACLO,OAAQ,CAAC,CAAC,EAAE,GAAI,CAACd,EAAEC,OAGrBC,EAAAC,EAAAC,cAdN,SAAmBiB,GACjB,OAAOnB,EAAAC,EAAAC,cAAA,qBAaH,OAEFF,EAAAC,EAAAC,cAAA,2BAAeF,EAAAC,EAAAC,cAAA,WAAf,2CACAF,EAAAC,EAAAC,cAAA,iCCxBckB,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c60cd7c3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import React, { useState } from 'react';\nimport selfie from './selfie.jpg';\nimport useWindowDimensions from './useWindowDimensions';\nimport './App.css';\nimport { Map, Marker, Popup, ImageOverlay } from 'react-leaflet'\nimport L from 'leaflet'\nimport ImageLoader from 'react-load-image';\n\nfunction App() {\n\n  const { height, width } = useWindowDimensions();\n  const [loaded, setLoaded] = useState(false);\n  console.log(height,width)\n  let w = width;\n  if(width > 450){\n    w = 450;\n  }\n  let h = w;\n\n  function Preloader(props) {\n    return <p>Loading</p>;\n  }\n  return (\n    <div>\n      <ImageLoader\n        src={selfie}\n      >\n        <Map crs={L.CRS.Simple} boundsOptions={[[0,0], [w,h]]} bounds={[[0,0], [w,h]]} maxBounds={[[0,0], [w,h]]} maxBoundsViscosity={1.0} style={{width: `${w}px`, height:`${w}px`}}>\n        <ImageOverlay\n          url={selfie}\n          bounds={[[0,0], [w,h]]}\n        />\n      </Map>\n        <Preloader />\n      </ImageLoader>\n      <p>Image carr√©e<br/>1800x1800 :: (60 mosaic de 30px) :: 6MB</p>\n      <p>Set de 227 mosaics</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/selfie.a5a0322b.jpg\";"],"sourceRoot":""}